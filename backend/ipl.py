# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DsFdIDXATLdy94X7-OXy-4fFkiR3H8SI
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset
file = pd.read_csv('matches.csv')

file.head()

# Drop irrelevant columns
file = file.drop(['umpire1', 'umpire2', 'date', 'dl_applied', 'id', 'venue'], axis=1)

# Remove rows with missing 'winner' (match not played or abandoned)
file = file.dropna(subset=['winner'])

# Binary classification: 1 if toss winner = match winner, else 0
file['target'] = (file['toss_winner'] == file['winner']).astype(int)

# Select features
features = ['team1', 'team2', 'toss_winner', 'toss_decision', 'city']
X = pd.get_dummies(file[features], drop_first=True)
y = file['target']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# Accuracy and classification report
print("Classification Report:\n", classification_report(y_test, y_pred))

sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

def predict_toss_win_effect(team1, team2, toss_winner, toss_decision, city):
    input_df = pd.DataFrame({
        'team1': [team1],
        'team2': [team2],
        'toss_winner': [toss_winner],
        'toss_decision': [toss_decision],
        'city': [city]
    })

    input_encoded = pd.get_dummies(input_df, drop_first=True)
    input_encoded = input_encoded.reindex(columns=X.columns, fill_value=0)

    pred = model.predict_proba(input_encoded)[0][1]
    return f"Probability of Toss Winner also winning the match: {pred:.2f}"

# Example
print(predict_toss_win_effect('Mumbai Indians', 'Chennai Super Kings', 'Mumbai Indians', 'bat', 'Mumbai'))

importances = model.feature_importances_
features_list = X.columns

# Create a DataFrame for better plotting
feat_imp_df = pd.DataFrame({'Feature': features_list, 'Importance': importances})
feat_imp_df = feat_imp_df.sort_values(by='Importance', ascending=False)

# Plot
plt.figure(figsize=(12, 6))
sns.barplot(x='Importance', y='Feature', data=feat_imp_df.head(15))  # top 15
plt.title("Top 15 Important Features for Toss-Win = Match-Win")
plt.xlabel("Importance")
plt.ylabel("Feature")
plt.tight_layout()
plt.show()

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import GradientBoostingClassifier

models = {
    'Random Forest': RandomForestClassifier(n_estimators=100, random_state=42),
    'Logistic Regression': LogisticRegression(max_iter=1000),
    'SVM': SVC(probability=True),
    'Gradient Boosting': GradientBoostingClassifier()
}

for name, clf in models.items():
    clf.fit(X_train, y_train)
    pred = clf.predict(X_test)
    acc = clf.score(X_test, y_test)
    print(f"{name}: Accuracy = {acc:.4f}")

from sklearn.model_selection import GridSearchCV

param_grid = {
    'n_estimators': [100, 150],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5]
}

grid_search = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=3, scoring='accuracy')
grid_search.fit(X_train, y_train)

print("Best Parameters:", grid_search.best_params_)
best_model = grid_search.best_estimator_

# Evaluate best model
best_pred = best_model.predict(X_test)
print("Tuned Random Forest Accuracy:", best_model.score(X_test, y_test))

import joblib

# Save the best model
joblib.dump(best_model, 'ipl_toss_win_model.pkl')

# Save column structure for future prediction
joblib.dump(X.columns.tolist(), 'model_features.pkl')

def predict_saved_model(team1, team2, toss_winner, toss_decision, city):
    model = joblib.load('ipl_toss_win_model.pkl')
    model_cols = joblib.load('model_features.pkl')

    df = pd.DataFrame({
        'team1': [team1],
        'team2': [team2],
        'toss_winner': [toss_winner],
        'toss_decision': [toss_decision],
        'city': [city]
    })

    df_encoded = pd.get_dummies(df, drop_first=True)
    df_encoded = df_encoded.reindex(columns=model_cols, fill_value=0)

    prob = model.predict_proba(df_encoded)[0][1]
    return f"Predicted Probability (Toss winner also wins match): {prob:.2f}"

# Example usage:
print(predict_saved_model('Mumbai Indians', 'Delhi Capitals', 'Mumbai Indians', 'bat', 'Mumbai'))

# Create new column: did toss winner win the match?
file['toss_win_match_win'] = (file['toss_winner'] == file['winner']).astype(int)

# Group and plot
toss_decision_outcome = file.groupby('toss_decision')['toss_win_match_win'].mean().reset_index()

# Plot
plt.figure(figsize=(6, 4))
sns.barplot(x='toss_decision', y='toss_win_match_win', data=toss_decision_outcome)
plt.title('Effect of Toss Decision on Match Win (%)')
plt.ylabel('Win Probability')
plt.xlabel('Toss Decision')
plt.ylim(0, 1)
plt.grid(True, linestyle='--', alpha=0.4)
plt.tight_layout()
plt.show()

# Filter out rows where toss_winner is not null
team_conversion = file[file['toss_winner'].notnull()].copy()
team_conversion['conversion'] = (team_conversion['toss_winner'] == team_conversion['winner']).astype(int)

# Group by toss_winner and get average conversion
team_conversion_rate = team_conversion.groupby('toss_winner')['conversion'].mean().reset_index()
team_conversion_rate = team_conversion_rate.sort_values(by='conversion', ascending=False)

# Plot
plt.figure(figsize=(12, 6))
sns.barplot(x='conversion', y='toss_winner', data=team_conversion_rate, palette='coolwarm')
plt.title('Team-wise Toss to Match Win Conversion Rate')
plt.xlabel('Conversion Rate')
plt.ylabel('Team')
plt.xlim(0, 1)
plt.grid(True, linestyle='--', alpha=0.3)
plt.tight_layout()
plt.show()

